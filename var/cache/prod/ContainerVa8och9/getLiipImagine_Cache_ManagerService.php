<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the private 'liip_imagine.cache.manager' shared service.

$this->services['liip_imagine.cache.manager'] = $instance = new \Liip\ImagineBundle\Imagine\Cache\CacheManager(${($_ = isset($this->services['liip_imagine.filter.configuration']) ? $this->services['liip_imagine.filter.configuration'] : $this->load('getLiipImagine_Filter_ConfigurationService.php')) && false ?: '_'}, ${($_ = isset($this->services['router']) ? $this->services['router'] : $this->getRouterService()) && false ?: '_'}, ${($_ = isset($this->services['liip_imagine.cache.signer']) ? $this->services['liip_imagine.cache.signer'] : ($this->services['liip_imagine.cache.signer'] = new \Liip\ImagineBundle\Imagine\Cache\Signer('3351b4f958888440521a4079605079bf831c7888'))) && false ?: '_'}, ${($_ = isset($this->services['debug.event_dispatcher']) ? $this->services['debug.event_dispatcher'] : $this->getDebug_EventDispatcherService()) && false ?: '_'}, 'default');

$instance->addResolver('default', ${($_ = isset($this->services['liip_imagine.cache.resolver.default']) ? $this->services['liip_imagine.cache.resolver.default'] : $this->load('getLiipImagine_Cache_Resolver_DefaultService.php')) && false ?: '_'});
$instance->addResolver('no_cache', ${($_ = isset($this->services['liip_imagine.cache.resolver.no_cache_web_path']) ? $this->services['liip_imagine.cache.resolver.no_cache_web_path'] : $this->load('getLiipImagine_Cache_Resolver_NoCacheWebPathService.php')) && false ?: '_'});

return $instance;
